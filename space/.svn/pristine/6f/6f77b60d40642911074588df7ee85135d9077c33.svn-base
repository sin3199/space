package com.bigdataB.space;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.bigdataB.space.dto.HostListDTO;
import com.bigdataB.space.dto.MemberDTO;
import com.bigdataB.space.dto.ReservedRoomDTO;
import com.bigdataB.space.dto.RoomListDTO;
import com.bigdataB.space.dto.SpaceDTO;
import com.bigdataB.space.dto.SpaceTypeDTO;
import com.bigdataB.space.service.AdminMapper;


@Controller
public class AdminController {
	
	@Autowired
	private AdminMapper adminMapper;
	
	@RequestMapping(value="main.do")
	public String main() { //전체메인으로 이동
		return "main";
	}
	
	@RequestMapping(value= {"admin_main.do"})
	public String adminMain() {  //admin 메인으로 이동
		return "admin/admin_main";
	}
	
	@RequestMapping(value="/admin_insertCategory.do", method=RequestMethod.GET)
	public String admin_insertCategory() {  //카테고리 입력 페이지로 이동
		return "admin/admin_insertCategory";
	}
	
	
	
	
	
	
	
	
	@RequestMapping("/admin_listCategory.do")
	public String admin_listCategory(HttpServletRequest req,@RequestParam Map<String,String> map) {
		if(!map.containsKey("sort")) { //카테고리 목록 불러오기
			map.put("sort", "desc");			
		}
		List<SpaceTypeDTO> list = adminMapper.listCate(map);
		req.setAttribute("listCate", list);
		return "admin/admin_listCategory";
	}
	@RequestMapping("/category_sort.do") //카테고리 목록에서 데이터 정렬 시키기
	public @ResponseBody List<SpaceTypeDTO> SpaceTypeSort(@RequestParam Map<String,String> map){
		List<SpaceTypeDTO> list = adminMapper.listCate(map);
		return list;
	}
	@RequestMapping("/search_cate.do")  //카테고리 목록에서 검색 하고 데이터 정렬 시키기
	public @ResponseBody List<SpaceTypeDTO> search_cate(@RequestParam Map<String,String> map){
		if(!map.containsKey("column")) {
			map.put("column", "cate_nm");
		}
		List<SpaceTypeDTO> list = adminMapper.searchCate(map);
		return list;
	}
	
	
	

	
	
	@RequestMapping("/admin_listGuest.do")  //게스트 목록 불러오기
	public String admin_listGuest(HttpServletRequest req, @RequestParam Map<String,String> map) {
		if(!map.containsKey("column")) {
			map.put("column", "member_nm");			
		}
		List<MemberDTO> list = adminMapper.listGuest(map);
		req.setAttribute("listGuest",list); 
		return "admin/admin_listGuest";
	}
	@RequestMapping("/guest_sort.do")  //게스트 목록에서 데이터 정렬 시키기
	public  @ResponseBody List<MemberDTO> guest_sort(@RequestParam Map<String,String> map) {
		List<MemberDTO> list = adminMapper.listGuest(map);
		return list;
	}
	@RequestMapping("/search_guest.do")   //게스트 목록에서 검색하고 데이터 정렬 시키기
	public @ResponseBody List<MemberDTO> search_guest(@RequestParam Map<String,String> map) {
		if(!map.containsKey("column")) {
			map.put("column", "member_nm");
		}
		List<MemberDTO> list = adminMapper.searchGuest(map);
		return list;
	}
	
	
	
	@RequestMapping("/admin_listHost.do")  //호스트 목록 불러오기
	public String admin_listHost(HttpServletRequest req, @RequestParam Map<String,String>map) {
		map.put("column", "member_nm");
		map.put("sort", "asc");
		
		List<HostListDTO> list = adminMapper.listHost(map);
		req.setAttribute("listHost", list);
		return "admin/admin_listHost";
	}
	@RequestMapping("/host_sort.do")  //호스트 목록에서 데이터 정렬 시키기
	public  @ResponseBody List<HostListDTO> host_sort(@RequestParam Map<String,String> map) {
		if(!map.containsKey("column")) {
			map.put("column", "member_nm");		
		}
		List<HostListDTO> list = adminMapper.listHost(map);
		return list;
	}
	@RequestMapping("/search_host.do")  //호스트 목록에서 검색하고 데이터 정렬 시키기
	public @ResponseBody List<HostListDTO> search_host(@RequestParam Map<String,String> map){
		if(!map.containsKey("column")) {
			map.put("column", "member_nm");
			map.put("sort", "asc");			
		}
		List<HostListDTO> list = adminMapper.searchHost(map);
		return list;
	}
	
	
	
	
	
	
	
	
	
	@RequestMapping(value="/admin_insertCategory.do", method=RequestMethod.POST) //카테고리 입력
	public String cate_insert(HttpServletRequest req, @ModelAttribute SpaceTypeDTO dto, BindingResult result) {
		
		if (result.hasErrors()) {
			dto.setCate_img("");
		}
		 
		MultipartHttpServletRequest mr = (MultipartHttpServletRequest)req;
		MultipartFile file = mr.getFile("cate_img");
		HttpSession session = req.getSession();
		
		String upPath = session.getServletContext().getRealPath("/resources/img/cateIcon");
		
		File target = new File(upPath, file.getOriginalFilename());
		
		dto.setCate_img(file.getOriginalFilename());
		
		try {
			file.transferTo(target);
		}catch(IOException e) {
			e.printStackTrace();
		}
		
		
		
		int res = adminMapper.insertCate(dto);
		if(res>0) {
			req.setAttribute("msg", "카테고리 등록 성공!");
			req.setAttribute("url", "admin_listCategory.do");
		} else {
			req.setAttribute("msg", "카테고리 등록 실패!!");
			req.setAttribute("url", "admin_insertCategory.do");
		}
		return "message";
	}
	
	
	
	
	@RequestMapping("/admin_listRoom.do")  //호스트 공간관리 목록 불러오기
	public String admin_listRoom(HttpServletRequest req,@RequestParam Map<String,String> map) {
		if(!map.containsKey("column")) {
			map.put("column","member_nm");			
		}
		List<RoomListDTO> list = adminMapper.listRoom(map);
		req.setAttribute("listSpaceRoom", list);
		return "admin/admin_listRoom";
	}
	@RequestMapping("/roomList_sort.do")  //호스트 공간관리 목록에서 데이터 정렬시키기
	public @ResponseBody List<RoomListDTO> roomList_sort(@RequestParam Map<String,String> map){
		List<RoomListDTO> list = adminMapper.listRoom(map);
		return list;
	}
	@RequestMapping("/search_listRoom.do")  //호스트 공간관리 목록에서 데이터 검색하고 정렬시키기
	public @ResponseBody List<RoomListDTO> roomList_search(@RequestParam Map<String,String> map){
		if(!map.containsKey("column")) {
			map.put("column", "member_nm");
		}
		List<RoomListDTO> list = adminMapper.searchRoom(map);
		return list;
	}
	
	
	
	
	
	 @RequestMapping("/admin_listReserve.do")  //룸예약리스트 목록 불러오기
	 public String admin_listReserve(HttpServletRequest req,@RequestParam Map<String,String> map) {
		 if(!map.containsKey("column")) {
			 map.put("column", "res_nm");
		 }
		 List<ReservedRoomDTO> list = adminMapper.listReserve(map);
		 req.setAttribute("listReserve", list);
		 return "admin/admin_listReserve";
	 }
	 @RequestMapping("/listReserve_sort.do")  //룸예약리스트 목록에서 데이터 정렬시키기
	 public @ResponseBody List<ReservedRoomDTO> listReserve_sort(@RequestParam Map<String,String>map) {
		 List<ReservedRoomDTO> list = adminMapper.listReserve(map);
		 return list;
	 }
	 @RequestMapping("/search_listReserve.do") //룸예약리스트 목록에서 데이터 검색하고 정렬시키기
	 public @ResponseBody List<ReservedRoomDTO> listReserve_search(@RequestParam Map<String,String> map){
		 if(!map.containsKey("column")) {
			 map.put("column", "res_nm");
		 }
		 List<ReservedRoomDTO> list = adminMapper.searchReserve(map);
		 return list;
	 }
	 
	 
	 @RequestMapping("/memberDelete.do") //회원 삭제 호스트 게스트 일단 한번에 쿼리문도 하나로 합치기 고려중
	 public String deleteMember(HttpServletRequest req, @RequestParam int member_no) {
		 int ifHasBuilding = adminMapper.ifHasBuilding(member_no); //회원번호로 건물이 있는지
		 MemberDTO dto = adminMapper.getMemberNm(member_no); //회원번호로 건물이름 받아오기
		 
		 if(ifHasBuilding == 0) {
			 int res = adminMapper.deleteMember(member_no); //건물이 없다면 회원 삭제
			 if(res>0) {
				 req.setAttribute("msg", "회원 삭제 성공");
				 req.setAttribute("url", "javascript:window.location.replace(document.referrer);");
			 } else{
				 req.setAttribute("msg", "회원 삭제 실패 메인 페이지로 이동합니다.");
				 req.setAttribute("url", "admin_main.do");
			 }			 		 			 
		 } else { //건물이 있다면 건물지우고 오게 돌려 보내기
			 req.setAttribute("msg", "회원번호 : "+member_no+" 닉네임 : "+dto.getMember_nm()+" 회원을 삭제 하시려면 "
			 		+ "\\n 해당 회원의 건물을 먼저 삭제 하셔야 합니다.");
			 req.setAttribute("url", "javascript:window.location.replace(document.referrer);");			 
		 }
		 return "message";
	 }
	 
	 
	 @RequestMapping("/buildDelete.do") //건물 삭제
	 public String deleteBuilding(HttpServletRequest req, @RequestParam int space_no) {
		 int ifHasRoom = adminMapper.ifHasRoom(space_no); //건물번호로 방이 있는지 
		 SpaceDTO dto = adminMapper.getSpaceNm(space_no); //건물번호로 방 이름 받아오기
		 if(ifHasRoom == 0) {
			 int res = adminMapper.deleteBuilding(space_no); //방이 없다면 건물 삭제
			 if(res>0) {
				 req.setAttribute("msg", "공간 삭제 성공");
				 req.setAttribute("url", "javascript:window.location.replace(document.referrer);");				 
			 } else {
				 req.setAttribute("msg", "공간 삭제 실패");
				 req.setAttribute("url", "admin_listHost.do");				 
			 }
		 } else { //방이 있다면 방을 지우고 오게 돌려보내기
			 req.setAttribute("msg", "공간번호 : "+space_no+" 공간이름 : "+dto.getSpace_nm()+" 공간을 삭제 하시려면 "
			 		+ "\\n 해당 공간의 룸을 먼저 삭제 하셔야 합니다.");
			 req.setAttribute("url", "javascript:"
			 		+ "searchRoomListSort({ column : 'member_nm', sort : 'asc',"
			 		+ " select : 'm.member_no', search : "+dto.getMember_no()+"});");			 
		 }
		 return "message";
	 }
	
	 
	 

}



























