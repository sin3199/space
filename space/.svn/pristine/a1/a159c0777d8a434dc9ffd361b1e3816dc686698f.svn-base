package com.bigdataB.space.service;

import java.nio.charset.StandardCharsets;
import java.security.Key;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

import org.apache.ibatis.session.SqlSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.bigdataB.space.dto.MemberDTO;

@Service
public class LoginMapper {
	@Autowired
	private SqlSession sqlSession;
	
	public int emailCheck(MemberDTO dto) {
		return sqlSession.selectOne("emailCheck",dto);
	}
	
	public int insertMember(MemberDTO dto) {
		return sqlSession.insert("insertMember", dto);
	}
	public MemberDTO getMember(String member_email) {
		return sqlSession.selectOne("getMember", member_email);
	}
	
	public Key generateKey(String key) throws Exception {
		Key keySpec;

		byte[] keyBytes = new byte[16];
		byte[] b = key.getBytes("UTF-8");

		int len = b.length;
		if (len > keyBytes.length) {
			len = keyBytes.length;
		}

		System.arraycopy(b, 0, keyBytes, 0, len);
		keySpec = new SecretKeySpec(keyBytes, "AES");
		return keySpec;
	}
	
	public String encryptText(String text, String key) {
		String encrypted = "";
		try {
			SecretKeySpec ks = (SecretKeySpec) generateKey(key);
			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
			cipher.init(Cipher.ENCRYPT_MODE, ks);
			byte[] encryptedBytes = cipher.doFinal(text.getBytes());
			String base64 = Base64.getEncoder().encodeToString(encryptedBytes);
			encrypted = new String(base64);
		} catch (Exception e) {
		}

		return encrypted;
	}
	
	public String decAES(String enStr, String key) throws Exception {
		SecretKeySpec ks = (SecretKeySpec) generateKey(key);

		Cipher c = Cipher.getInstance("AES/ECB/PKCS5Padding");
		c.init(Cipher.DECRYPT_MODE, ks);
		    
		byte[] byteStr = Base64.getDecoder().decode(enStr.getBytes("UTF-8"));
		String decStr = new String(c.doFinal(byteStr), "UTF-8");

		return decStr;
	}
}
